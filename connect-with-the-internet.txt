//include libraries we need later on
#include <ESP8266WiFi.h>
#include <PubSubClient.h>

// values suitable for our network. 
// CHANGE THESE FOR YOUR OWN NETWORK
const char* ssid = "ucll-projectweek-IoT";
const char* password = "Foo4aiHa";

//create client variabele
WiFiClient espClient;
PubSubClient client(espClient);

// make variables with the names of the pins and assign them the right pin number
#define trigPinS1 16    //pin D0 is 16
#define echoPinS1 5   //pin D1 is 5
#define ledGreenS1 4  //pin D2 is 4
#define ledRedS1 0      //pin D3 is 0
#define trigPinS2 2    //pin D4 is 16
#define echoPinS2 14   //pin D5 is 5
#define ledGreenS2 12  //pin D6 is 4
#define ledRedS2 13      //pin D7 is 0

// defines variables of ultrasonic sensors
long durationS1 = 0;
int distanceS1 = 0;
long durationS2 = 0;
int distanceS2 = 0; 

void setup() {
  Serial.begin (115200);
  setup_wifi(); //zet wi-fi klaar
  pinMode(trigPinS1, OUTPUT); 
  pinMode(echoPinS1, INPUT);
  pinMode(ledGreenS1, OUTPUT);
  pinMode(ledRedS1, OUTPUT);
  pinMode(trigPinS2, OUTPUT); 
  pinMode(echoPinS2, INPUT);
  pinMode(ledGreenS2, OUTPUT);
  pinMode(ledRedS2, OUTPUT);
}

void setup_wifi() {
  delay(10);
  // We start by connecting to a WiFi network
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

void loop() {
  //reconnect if disconnected
  if (!client.connected()) {
    reconnect();
  }
  client.loop();
  
  // Clears the trigPin
  digitalWrite(trigPinS1, LOW);
  delayMicroseconds(2);

  // Sets the trigPin on HIGH state for 10 micro seconds
  digitalWrite(trigPinS1, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPinS1, LOW);
  delayMicroseconds(10);

  // Reads the echoPin, returns the sound wave travel time in microseconds
  durationS1 = pulseIn(echoPinS1, HIGH);
  distanceS1= durationS1*0.034/2;
  
  // Prints the distance on the Serial Monitor
  Serial.print("Distance (Sensor 1): ");
  Serial.print(distanceS1);
  Serial.println(" cm");

  //short delay to start with the next sensor
  delay(200); 
  
  // Clears the trigPin
  digitalWrite(trigPinS2, LOW);
  delayMicroseconds(2);

  // Sets the trigPin on HIGH state for 10 micro seconds
  digitalWrite(trigPinS2, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPinS2, LOW);
  delayMicroseconds(10);

  // Reads the echoPin, returns the sound wave travel time in microseconds
  durationS2 = pulseIn(echoPinS2, HIGH);
  distanceS2= durationS2*0.034/2;
  
  // Prints the distance on the Serial Monitor  
  Serial.print("Distance (Sensor 2): ");
  Serial.print(distanceS2);
  Serial.println(" cm");

  if (distanceS1 < 4) {  // This is where the LED On/Off happens
    digitalWrite(ledRedS1,HIGH); // When the Red condition is met, the Green LED should turn off
    digitalWrite(ledGreenS1,LOW);
  }
  else {
    digitalWrite(ledRedS1,LOW); // and this is of course, the inverse of the above.
    digitalWrite(ledGreenS1,HIGH);
  }
  if (distanceS2 < 15) {  // This is where the LED On/Off happens
    digitalWrite(ledRedS2,HIGH); // When the Red condition is met, the Green LED should turn off
    digitalWrite(ledGreenS2,LOW);
  }
  else {
    digitalWrite(ledRedS2,LOW); // and this is of course, the inverse of the above.
    digitalWrite(ledGreenS2,HIGH);
  }

delay(500);
} 

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Attempt to connect
    if (client.connect(MQTT_DEVICEID, MQTT_USER, MQTT_TOKEN)) {
      Serial.println("connected");
      client.subscribe(MQTT_TOPIC_DISPLAY);
    } 
    else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}
