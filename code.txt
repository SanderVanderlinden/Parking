//include libraries we need later on
#include <ESP8266WiFi.h>
#include <PubSubClient.h>

// Watson IoT connection details
#define MQTT_HOST "rly0g8.messaging.internetofthings.ibmcloud.com"
#define MQTT_PORT 1883
#define MQTT_DEVICEID "d:rly0g8:arduino:Arduino02"
#define MQTT_USER "use-token-auth"
#define MQTT_TOKEN "yDLN7U5&I?*_MQ4rlo"
#define MQTT_TOPIC "iot-2/evt/status/fmt/json"
#define MQTT_TOPIC_DISPLAY "iot-2/cmd/update/fmt/json"

// values suitable for our network.
const char* ssid = "ucll-projectweek-IoT";
const char* password = "Foo4aiHa";
const char* mqtt_server = "rly0g8.messaging.internetofthings.ibmcloud.com";

//create client variabele
WiFiClient espClient;
PubSubClient client(espClient);

// defines pins numbers of ultrasonic sensors and leds
const int trigPinS1 = 5; //D1 op Arduino ESP8266MOD
const int echoPinS1 = 16; //D0 op Arduino ESP8266MOD
const int ledRedS1 = 14; //D5 op Arduino ESP8266MOD
const int ledGreenS1 = 2; //D4 op Arduino ESP8266MOD

const int trigPinS2 = 0; //D3 op Arduino ESP8266MOD
const int echoPinS2 = 15; //D8 op Arduino ESP8266MOD
const int ledRedS2 = 12; //D6 op Arduino ESP8266MOD
const int ledGreenS2 = 13; //D7 op Arduino ESP8266MOD

// defines variables of ultrasonic sensors
long durationS1 = 0;
int distanceS1 = 0;
long durationS2 = 0;
int distanceS2 = 0; 

// We need the distances of the previous loop to detect whether the data has changed or not.
int previousDistanceS1 = distanceS1;
int previousDistanceS2 = distanceS2;

// this loopcounter is used to perform a check every x loops.
// Otherwise data is only transmitted when change is detected.
int loopCounter = 0;

void setup() {
  Serial.begin(115200);                 //upload speed is 115200
  setup_wifi();                         
  setupUltraSonicSensors();             //code to set up ultrasonic sensors
  setupLeds();                          //code to set up leds
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);
}

void setup_wifi() {
  delay(10);
  // We start by connecting to a WiFi network
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

void setupUltraSonicSensors() {
  pinMode(trigPinS1, OUTPUT); // Sets the trigPin as an Output
  pinMode(echoPinS1, INPUT); // Sets the echoPin as an Input
  pinMode(trigPinS2, OUTPUT); // Sets the trigPin as an Output
  pinMode(echoPinS2, INPUT); // Sets the echoPin as an Input
}

void setupLeds(){
  //all leds are outputs
  pinMode(ledRedS1, OUTPUT);
  pinMode(ledGreenS1, OUTPUT);
  pinMode(ledRedS2, OUTPUT);
  pinMode(ledGreenS2, OUTPUT);
}

void callback(char* topic, byte* payload, unsigned int length) {
  
  Serial.print("Parking 1 is ");
  //The char with index 17 returned by the IBM platform determins if the parking spot is taken
  if ((char)payload[17] == '1'){
    digitalWrite(ledRedS1, HIGH);   // turn the LED on (HIGH is the voltage level)
    digitalWrite(ledGreenS1, LOW);   // turn the LED off by making the voltage LOW
    Serial.println("taken");
  }
  else{
    digitalWrite(ledRedS1, LOW);    // turn the LED off by making the voltage LOW
    digitalWrite(ledGreenS1, HIGH);  // turn the LED on (HIGH is the voltage level)
    Serial.println("free");
  }
  //The char with index 38 returned by the IBM platform determins if the parking spot is taken
  Serial.print("Parking 2 is ");
  if ((char)payload[38] == '1'){
    digitalWrite(ledRedS2, HIGH);   // turn the LED on (HIGH is the voltage level)
    digitalWrite(ledGreenS2, LOW);   // turn the LED off by making the voltage LOW
    Serial.println("taken");
  }
  else{
    digitalWrite(ledRedS2, LOW);    // turn the LED off by making the voltage LOW
    digitalWrite(ledGreenS2, HIGH);   // turn the LED on (HIGH is the voltage level)
    Serial.println("vrij");
  }
  Serial.println("");
}

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Attempt to connect
    if (client.connect(MQTT_DEVICEID, MQTT_USER, MQTT_TOKEN)) {
      Serial.println("connected");
      client.subscribe(MQTT_TOPIC_DISPLAY);
    } 
    else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}

void loop() {
  //reconnect if disconnected
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  loopUltraSonicSensors(); //ultrasonic sensor loop
  
  if ((abs(distanceS1 - previousDistanceS1) > 1) || (abs(distanceS2 - previousDistanceS2) > 1)){
    Serial.println("VERANDERING GEDETECTEERD");
    
    //build json and print to monitor
    String payload = buildJson();
    //Serial.println(payload);

    //publish data to IBM
    client.publish(MQTT_TOPIC, (char*) payload.c_str());
  }
  if (loopCounter == 50){
    Serial.println("CONTROLE OM DE 50 LOOPS");
    client.publish(MQTT_TOPIC, (char*) buildJson().c_str());
    loopCounter = 0;
  }
  else{
    loopCounter++;
  }
}

void loopUltraSonicSensors() {
  // Clears the trigPin
  digitalWrite(trigPinS1, LOW);
  delayMicroseconds(2);

  // Sets the trigPin on HIGH state for 10 micro seconds
  digitalWrite(trigPinS1, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPinS1, LOW);
  delayMicroseconds(10);

  // Reads the echoPin, returns the sound wave travel time in microseconds
  durationS1 = pulseIn(echoPinS1, HIGH);
  previousDistanceS1 = distanceS1;
  distanceS1= durationS1*0.034/2;
  
  // Prints the distance on the Serial Monitor
  Serial.print("Distance (Sensor 1): ");
  Serial.print(distanceS1);
  Serial.println(" cm");
     
  delay(200); //short delay to make sure the sensors don't interfere with each other

  // Clears the trigPin
  digitalWrite(trigPinS2, LOW);
  delayMicroseconds(2);

  // Sets the trigPin on HIGH state for 10 micro seconds
  digitalWrite(trigPinS2, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPinS2, LOW);
  delayMicroseconds(10);

  // Reads the echoPin, returns the sound wave travel time in microseconds
  durationS2 = pulseIn(echoPinS2, HIGH);
  previousDistanceS2 = distanceS2;
  distanceS2= durationS2*0.034/2;
  
  // Prints the distance on the Serial Monitor  
  Serial.print("Distance (Sensor 2): ");
  Serial.print(distanceS2);
  Serial.println(" cm");
} 

  //This method buils the data to be transmitted to the IBM platform in JSON
  String buildJson() {
  String data = "{";
  data+="\n";
  data+= "\"d\": {";
  data+="\n";
  data+="\"myName\": \"Arduino ESP8266MOD\",";
  data+="\n";
  data+="\"distanceS1 (cm)\": ";
  data+=(int)distanceS1;
  data+=",\n";
  data+="\"distanceS2 (cm)\": ";
  data+=(int)distanceS2;
  data+="\n";
  data+="}";
  data+="\n";
  data+="}";
  return data;
}
